// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[0..2], a=tmp7, b=tmp6, c=tmp5, d=tmp4, e=tmp3, f=tmp2, g=tmp1, h=tmp0);
    RAM8(in=in, load=tmp7, address=address[3..5], out=ramout7);
    RAM8(in=in, load=tmp6, address=address[3..5], out=ramout6);
    RAM8(in=in, load=tmp5, address=address[3..5], out=ramout5);
    RAM8(in=in, load=tmp4, address=address[3..5], out=ramout4);
    RAM8(in=in, load=tmp3, address=address[3..5], out=ramout3);
    RAM8(in=in, load=tmp2, address=address[3..5], out=ramout2);
    RAM8(in=in, load=tmp1, address=address[3..5], out=ramout1);
    RAM8(in=in, load=tmp0, address=address[3..5], out=ramout0);

    Mux8Way16(a=ramout7,b=ramout6,c=ramout5,d=ramout4,e=ramout3,f=ramout2,g=ramout1,h=ramout0,sel=address[0..2],out=out);
}